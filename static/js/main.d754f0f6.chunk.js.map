{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isReversed","setReversed","DEFAULT","sortField","setSortField","visibleGoods","goods","preparedGoods","ALPHABET","sort","good1","good2","localeCompare","LENGTH","length","reverse","getPreparedGoods","className","type","classNames","onClick","prev","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,gBAAAA,E,oBAAAA,E,YAAAA,M,KAmCE,IAAME,EAAM,WACjB,MAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAkCF,mBAASH,EAASM,SAApD,mBAAOC,EAAP,KAAkBC,EAAlB,KAEMC,EA5BR,SAA0BC,EAA1B,GACoD,IAAhDH,EAA+C,EAA/CA,UAAWH,EAAoC,EAApCA,WACPO,EAAa,YAAOD,GAE1B,GAAIH,EACF,OAAQA,GACN,KAAKP,EAASY,SACZD,EAAcE,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAME,cAAcD,MACzD,MACF,KAAKf,EAASiB,OACZN,EAAcE,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMI,OAASH,EAAMG,UAC1D,MACF,QACE,OAAOP,EAQb,OAJIP,GACFO,EAAcQ,UAGTR,EAOcS,CAAiBnB,EACpC,CAAEM,YAAWH,eAWf,OACE,sBAAKiB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAW,SAAU,UAAW,CACzC,WAAYhB,IAAcP,EAASY,WAErCY,QAAS,WACPhB,EAAaR,EAASY,WAN1B,iCAYA,wBACEU,KAAK,SACLD,UAAWE,IAAW,SAAU,aAAc,CAC5C,WAAYhB,IAAcP,EAASiB,SAErCO,QAAS,WACPhB,EAAaR,EAASiB,SAN1B,4BAWA,wBACEK,KAAK,SACLD,UAAWE,IAAW,SAAU,aAAc,CAC5C,YAAanB,IAEfoB,QAxCmB,WACzBnB,GAAY,SAAAoB,GAAI,OAAKA,MAkCjB,sBASElB,GAAaH,IACb,wBACEkB,KAAK,SACLD,UAAWE,IAAW,SAAU,YAAa,YAC7CC,QA5Ce,WACvBhB,EAAaR,EAASM,SACtBD,GAAY,IAuCN,sBASJ,6BACGI,EAAaiB,KAAI,SAACC,GAAD,OAChB,oBAAe,UAAQ,OAAvB,SACGA,GADMA,YCjHnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.d754f0f6.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  LENGTH = 'length',\n  ALPHABET = 'alphabet',\n  DEFAULT = '',\n}\n\ninterface SortParams {\n  sortField: SortType;\n  isReversed: boolean;\n}\n\nfunction getPreparedGoods(goods: string[],\n  { sortField, isReversed }: SortParams): string[] {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    switch (sortField) {\n      case SortType.ALPHABET:\n        preparedGoods.sort((good1, good2) => good1.localeCompare(good2));\n        break;\n      case SortType.LENGTH:\n        preparedGoods.sort((good1, good2) => good1.length - good2.length);\n        break;\n      default:\n        return preparedGoods;\n    }\n  }\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App = () => {\n  const [isReversed, setReversed] = useState(false);\n  const [sortField, setSortField] = useState(SortType.DEFAULT);\n\n  const visibleGoods = getPreparedGoods(goodsFromServer,\n    { sortField, isReversed });\n\n  const handleReverseClick = () => {\n    setReversed(prev => !prev);\n  };\n\n  const handleResetClick = () => {\n    setSortField(SortType.DEFAULT);\n    setReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames('button', 'is-info', {\n            'is-light': sortField !== SortType.ALPHABET,\n          })}\n          onClick={() => {\n            setSortField(SortType.ALPHABET);\n          }}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button', 'is-success', {\n            'is-light': sortField !== SortType.LENGTH,\n          })}\n          onClick={() => {\n            setSortField(SortType.LENGTH);\n          }}\n        >\n          Sort by length\n        </button>\n        <button\n          type=\"button\"\n          className={classNames('button', 'is-warning', {\n            'is-light': !isReversed,\n          })}\n          onClick={handleReverseClick}\n        >\n          Reverse\n        </button>\n        {(sortField || isReversed) && (\n          <button\n            type=\"button\"\n            className={classNames('button', 'is-danger', 'is-light')}\n            onClick={handleResetClick}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n      <ul>\n        {visibleGoods.map((good: string) => (\n          <li key={good} data-cy=\"Good\">\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}